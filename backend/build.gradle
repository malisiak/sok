apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'idea'

task prepareResources() << {
  processResources {
    outputs.upToDateWhen {
      return false;
    }
    filesMatching('config.properties') {
      filter { line -> line.contains('app.build') ? 'app.build='+getDate() : line }
    }
  }
}

task prod() << {
  war.archiveName 'backend.war'
  processResources {
    filesMatching('config.properties') {
      filter { line -> line.contains('app.version') ? 'app.version=prod' : line }
      filter { line -> line.contains('mail.server') ? 'mail.server='+System.getenv('SOK_MAILSERVER') : line }
    }
    filesMatching('hibernate.cfg.xml') {
      filter { line -> line.contains('connection.url') ? '<property name="connection.url">jdbc:postgresql://'+System.getenv('SOK_PROD_DBSERVER')+':5432/'+System.getenv('SOK_PROD_DBNAME')+'</property>' : line }
      filter { line -> line.contains('connection.username') ? '<property name="connection.username">'+System.getenv('SOK_PROD_DBUSER')+'</property>' : line }
      filter { line -> line.contains('connection.password') ? '<property name="connection.password">'+System.getenv('SOK_PROD_DBPASS')+'</property>' : line }
    }
  }
}

task dev() << {
  war.archiveName 'backend-dev.war'
  processResources {
    from('src/main/resources') {
      include 'config.properties'
      filter { line -> line.contains('app.version') ? 'app.version=dev' : line }
      filter { line -> line.contains('mail.server') ? 'mail.server='+System.getenv('SOK_MAILSERVER') : line }
    }
    filesMatching('hibernate.cfg.xml') {
      filter { line -> line.contains('connection.url') ? '<property name="connection.url">jdbc:postgresql://'+System.getenv('SOK_DEV_DBSERVER')+':5432/'+System.getenv('SOK_DEV_DBNAME')+'</property>' : line }
      filter { line -> line.contains('connection.username') ? '<property name="connection.username">'+System.getenv('SOK_DEV_DBUSER')+'</property>' : line }
      filter { line -> line.contains('connection.password') ? '<property name="connection.password">'+System.getenv('SOK_DEV_DBPASS')+'</property>' : line }
    }
  }
}

processResources.dependsOn prepareResources
prepareResources.shouldRunAfter prod
prepareResources.shouldRunAfter dev

repositories {
  mavenCentral()
}

dependencies {
  compile 'javax.ws.rs:jsr311-api:1.1.1'
  compile 'javax.servlet:javax.servlet-api:3.0.1'
  compile 'com.sun.jersey:jersey-core:1.18.1'
  compile 'com.sun.jersey:jersey-server:1.18.1'
  compile 'com.sun.jersey:jersey-json:1.18.1'
  compile 'com.sun.jersey:jersey-servlet:1.18.1'
  compile 'org.hibernate:hibernate-core:5.0.2.Final'
  compile 'org.hibernate:hibernate-validator:5.2.2.Final'
  compile 'org.hibernate:hibernate-entitymanager:5.0.2.Final'
  compile 'org.hibernate:hibernate-c3p0:5.0.2.Final'
  compile 'org.postgresql:postgresql:9.3-1100-jdbc4'
  compile 'log4j:log4j:1.2.17'
  compile 'javax.mail:mail:1.4'
  compile 'org.mockito:mockito-all:1.9.5'
  compile 'javax.el:javax.el-api:3.0.0'
  compile 'com.google.guava:guava:12.0'

  testCompile 'junit:junit:4.4'
}

def getDate() {
  def date = new Date()
  def formattedDate = date.format('yyyyMMddHHmmss')
  return formattedDate
}